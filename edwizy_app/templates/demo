<div class="bot__container__section">
                <div class="bot__container-item">
                    <label for="ethereum" class="bot__container-item-title">Chart</label>
                    <select id="chart-select" class="bot__container-item-subtitle">
                        <option value="none">-----</option>
                        {% for chart in charts %}
                        <option value="{{chart}}">{{chart}}</option>
                        {% endfor %}
                    </select>
                </div>
                <input type="checkbox" name="bot" value="{{ bot.id }}" checked>
                <div class="bot__container-item">
                    <label for="ethereum" class="bot__container-item-title">Bot</label>
                    <select id="bot-select" class="bot__container-item-subtitle">
                        <option value="none">-----</option>
                        {% for bot in bots %}
                        <option value="{{bot}}">{{bot}}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="bot__container-item">
                    <label for="ethereum" class="bot__container-item-title">Timeframe</label>
                    <select id="timeframe-select" class="bot__container-item-subtitle">
                        <option value="none">-----</option>
                        {% for time in timeframe %}
                        <option value="{{time}}">{{time}}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="bot__container-item">
                    <label for="ethereum" class="bot__container-item-title">Order Type</label>
                    <select id="order-type-select" class="bot__container-item-subtitle">
                        <option value="none">-----</option>
                        {% for type in order_type%}
                        <option value="{{type}}">{{type}}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="bot__container-item">
                    <label for="ethereum" class="bot__container-item-title">Order Size</label>
                    <select id="order-size-select" class="bot__container-item-subtitle">
                        <option value="none">-----</option>
                        {% for size in order_size %}
                        <option value="{{ size }}">{{ size }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="bot__container-item">
                    <label for="ethereum" class="bot__container-item-title">R:R</label>
                    <select id="risk-reward-select" class="bot__container-item-subtitle">
                        <option value="none">-----</option>
                        {% for r_r in risk_reward %}
                        <option value="{{r_r}}">{{r_r}}</option>
                        {% endfor %}
                    </select>
                </div>
            </div>

            <div class="bot__container__section__bots">
                {% for bot in bots %}
                <div class="bot__container__section__bots_details">
                    <div class="section__bots_details__header">
                        <label for="" class="section__bots_details__header-title">{{ bot }}</label>
                        <input type="checkbox" name="bot" value="{{ bot.id }}" checked>
                    </div>
                    <div class="section__bots_details__body">
                        <div class="section__bots_details__body-item">
                            <label for="timeframe-select" class="bot__container-item-title">Timeframe</label>
                            <select id="timeframe-select" class="bot__container-item-subtitle">
                                <option value="none">-----</option>
                                {% for time in timeframe %}
                                <option value="{{time}}">{{time}}</option>
                                {% endfor %}
                            </select>
                         
                        </div>
                        <div class="section__bots_details__body-item">
                            <label for="order-type-select" class="bot__container-item-title">Order Type</label>
                            <select id="order-type-select" class="bot__container-item-subtitle">
                                <option value="none">-----</option>
                                {% for type in order_type%}
                                <option value="{{type}}">{{type}}</option>
                                {% endfor %}
                            </select>
                        </div>
                        <div class="section__bots_details__body-item">
                            <label for="order-size-select" class="bot__container-item-title">Order Qty</label>
                            <select id="order-size-select" class="bot__container-item-subtitle">
                                <option value="none">-----</option>
                                {% for size in order_size %}
                                <option value="{{ size }}">{{ size }}</option>
                                {% endfor %}
                            </select>
                        </div>
                        <div class="section__bots_details__body-item">
                            <label for="risk-reward-select" class="bot__container-item-title">R:R</label>
                            <select id="risk-reward-select" class="bot__container-item-subtitle">
                                <option value="none">-----</option>
                                {% for r_r in risk_reward %}
                                <option value="{{r_r}}">{{r_r}}</option>
                                {% endfor %}
                            </select>
                            
                        </div>
                        
                    </div>
                    
                </div>
                {% endfor %}
            </div>



            KEEPPPADJSJSBKDFBHJSFHJDFFJFJ



























            <!-- index.html -->
{% extends 'base.html' %}

{% block title %}
    Add New Bot - Edwizy Bots
{% endblock %}

{% block content %}
    <div class="addbot__header">
        <span><h1>All Tradable Assets</h1></span>
        <span class="search__assets"><input type="search" placeholder="Browse available assets"></span>
        <span><button id="add_new_bot">Add New Asset</button></span>
    </div>
   

    <div class="bot__section">
        {% if active_bots %}
        {% for bots in active_bots %}
        <div class="bot__container " data-bot-id="{{ bots.id }}">
            <div class="bot__container__section">
                <div class="bot__container-item">
                    <span class="bot__container-item-title">Symbol</span>
                    <span class="bot__container-item-subtitle" data-field="">{{bots.symbol}}</span>
                </div>
                
                <div class="bot__container-item">
                    <span class="bot__container-item-title">Bot</span>
                    <span class="bot__container-item-subtitle" data-field="bot">{{bots.bot.name}}</span>
                </div>
                <div class="bot__container-item">
                    <span class="bot__container-item-title">Timeframe</span>
                    <span class="bot__container-item-subtitle" data-field="timeframe">{{bots.time_frame}}</span>
                </div>
                <div class="bot__container-item">
                    <span class="bot__container-item-title">Order Type</span>
                    <span class="bot__container-item-subtitle" data-field="order-type">{{bots.order_type}}</span>
                </div>
                <div class="bot__container-item">
                    <span class="bot__container-item-title">Order Size</span>
                    <span class="bot__container-item-subtitle" data-field="order-size">{{bots.order_size}}</span>
                </div>
                <div class="bot__container-item">
                    <span class="bot__container-item-title">R:R</span>
                    <span class="bot__container-item-subtitle" data-field="risk-reward">{{bots.risk_reward}}</span>
                </div>   
            </div>
            <div class="bot__container-overlay-container">
                <div class="bot__container-overlay">
                    <div class="bot__container-overlay-section">
                        <span class="bot__container-overlay-title">
                            Total Trades
                        </span>
                        <span class="bot__container-overlay-subtitle">
                            {{bots.total_trades}}
                        </span>
                    </div>
                    <div class="bot__container-overlay-section">
                        <span class="bot__container-overlay-title">
                            Win Rate
                        </span>
                        <span class="bot__container-overlay-subtitle">
                            {{bots.win_rate}}%
                        </span>
                    </div>
                </div>
                <div class="bot__container-overlay-btn">
                    <button class="update_bot_btn" data-bot-id="{{ bots.id }}">Update</button>
                    
                </div>
            </div> 
        </div>
        {% endfor %}
        {% else %}
        <div class="empty_bots-container">
            <span class="empty_bots">Please Add Bots to symbol to begin trading.</span>
        </div>
       

        {%endif%}

    </div>
    <div class="bot__container-update" id="bot__container-update">
        <div class="bot__container-update__container">
            <h2 class="bot__container__section-header">Add New Asset to Trade</h2>
            <div class="bot__container__update-section">
                <div class="bot__container__section__symbol__details">
                    <div class="section__symbol__details__item">
                        <label for="" class="bot__container-item-title">Symbol</label>
                        <input type="text" name="" id="symbol" class="bot__container-item-field">
                    </div>
                    <div class="section__symbol__details__item">
                        <label for="" class="bot__container-item-title">Security ID</label>
                        <input type="text" name="" id="security-id" class="bot__container-item-field">
                    </div>
                    <div class="section__symbol__details__item">
                        <label for="" class="bot__container-item-title">Exchange Segement</label>
                        <input type="text" name="" id="exchange-segment" class="bot__container-item-field">
                    </div>
                    <div class="section__symbol__details__item">
                        <label for="" class="bot__container-item-title">Instrument Type</label>
                        <input type="text" name="" id="instrument-type" class="bot__container-item-field">
                    </div>
                </div>
            </div>
            <div class="bot__container-update-btns">
                <button id="remove_from_chart_btn" class="remove_from_chart_btn">Remove Bot</button>
                <button id="discard_changes">Discard Changes</button>
                <button id="add_to_chart_btn" class="add_to_chart_btn">Add to symbol</button>
            </div>
        </div>
    </div>   

        <!--- ======================== CUSTOM JS LINK========================== -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/mixitup/3.3.1/mixitup.min.js" integrity="sha512-nKZDK+ztK6Ug+2B6DZx+QtgeyAmo9YThZob8O3xgjqhw2IVQdAITFasl/jqbyDwclMkLXFOZRiytnUrXk/PM6A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const updateButtons = document.querySelectorAll('.update_bot_btn');
                const addToChartBtn = document.getElementById('add_to_chart_btn');
                const removeFromChartBtn = document.getElementById('remove_from_chart_btn');
                const addBotBtn = document.getElementById('add_new_bot');
                const discardChanges = document.getElementById('discard_changes'); 
                const overlayUpdateBot = document.querySelector('.bot__container-update');
                let selectedBotId = null;

                updateButtons.forEach((button) => {
                        button.addEventListener('click', (event) => {
                        selectedBotId = event.currentTarget.dataset.botId;
                        console.log(selectedBotId)
                        const botContainer = event.currentTarget.closest('.bot__container');
                        const symbol = botContainer.querySelector('.bot__container-item-subtitle[data-field="symbol"]').textContent;
                        const bot = botContainer.querySelector('.bot__container-item-subtitle[data-field="bot"]').textContent;
                        const timeframe = botContainer.querySelector('.bot__container-item-subtitle[data-field="timeframe"]').textContent;
                        const orderType = botContainer.querySelector('.bot__container-item-subtitle[data-field="order-type"]').textContent;
                        const orderSize = botContainer.querySelector('.bot__container-item-subtitle[data-field="order-size"]').textContent;
                        const riskReward = botContainer.querySelector('.bot__container-item-subtitle[data-field="risk-reward"]').textContent;

                        const chartSelect = document.getElementById('symbol-select');
                        const selectedChartOption = chartSelect.options[chartSelect.selectedIndex];
                        const chartOption = chartSelect.querySelector(`option[value="${symbol}"]`);
                        chartOption.selected = true;
                        const selectedChartValue = chartOption.value;

                        const botSelect = document.getElementById('bot-select');
                        const selectedBotOption = botSelect.options[botSelect.selectedIndex];
                        const botOption = botSelect.querySelector(`option[value="${bot}"]`);
                        botOption.selected = true;
                        const selectedBotValue = botOption.value;

                        const timeframeSelect = document.getElementById('timeframe-select');
                        const selectedTimeframeOption = timeframeSelect.options[timeframeSelect.selectedIndex];
                        const timeframeOption = timeframeSelect.querySelector(`option[value="${timeframe}"]`);
                        timeframeOption.selected = true;
                        const selectedTimeframeValue = timeframeOption.value;

                        const orderTypeSelect = document.getElementById('order-type-select');
                        const selectedOrderTypeOption = orderTypeSelect.options[orderTypeSelect.selectedIndex];
                        const orderTypeOption = orderTypeSelect.querySelector(`option[value="${orderType}"]`);
                        orderTypeOption.selected = true;
                        const selectedOrderTypeValue = orderTypeOption.value;

                        const orderSizeSelect = document.getElementById('order-size-select');
                        const selectedOrderSizeOption = orderSizeSelect.options[orderSizeSelect.selectedIndex];
                        const orderSizeOption = orderSizeSelect.querySelector(`option[value="${orderSize}"]`);
                        orderSizeOption.selected = true;
                        const selectedOrderSizeValue = orderSizeOption.value;

                        const riskRewardSelect = document.getElementById('risk-reward-select');
                        const selectedRiskRewardOption = riskRewardSelect.options[riskRewardSelect.selectedIndex];
                        const riskRewardOption = riskRewardSelect.querySelector(`option[value="${riskReward}"]`);
                        riskRewardOption.selected = true;
                        const selectedRiskRewardValue = riskRewardOption.value;

                        // Show the update container
                        const updateContainer = document.getElementById('bot__container-update');
                        updateContainer.classList.add('active');
                    });
                });

                addToChartBtn.addEventListener('click', () => {
                    if (selectedBotId) {
                        // Get the updated values
                        const symbol = document.getElementById('symbol').value;
                        const exchange_segment = document.getElementById('exchange-segment').value;
                        const instrument_type = document.getElementById('instrument-type').value;
                        const security_id = document.getElementById('security-id').value;
                        const timeframe = document.getElementById('timeframe-select').value;
                        const orderType = document.getElementById('order-type-select').value;
                        const orderSize = document.getElementById('order-size-select').value;
                        const riskReward = document.getElementById('risk-reward-select').value;

                        // Create an object with the updated values and botId
                        const updatedData = {
                            botId: selectedBotId,
                            symbol,
                            exchange_segment,
                            instrument_type,
                            security_id,
                            timeframe,
                            orderType,
                            orderSize,
                            riskReward
                        };

                        console.log(updatedData)
                        
                        // Send the updated values to the Django backend using fetch
                        fetch('update_bot', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(updatedData)
                        })
                        .then(response => {
                            // Handle the response from the Django backend
                            if (response.ok) {
                                // Success, do something
                                const updateContainer = document.getElementById('bot__container-update');
                                updateContainer.classList.remove('active');
                                location.reload();
                            } else {
                                // Error, do something
                            }
                        })
                        .catch(error => {
                            // Handle any errors that occurred during the request
                        });
                    }
                });

                removeFromChartBtn.addEventListener('click', () => {
                    if (selectedBotId) {
                        // Create an object with the updated values and botId
                        const updatedData = {
                            botId: selectedBotId,
                        };

                        console.log(updatedData)

                        // Send the updated values to the Django backend using fetch
                        fetch('delete_bot', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(updatedData)
                        })
                        .then(response => {
                            // Handle the response from the Django backend
                            if (response.ok) {
                                // Success, do something
                                const updateContainer = document.getElementById('bot__container-update');
                                updateContainer.classList.remove('active');
                                location.reload();
                            } else {
                                // Error, do something
                            }
                        })
                        .catch(error => {
                            // Handle any errors that occurred during the request
                        });
                    }
                });
                
                addBotBtn.addEventListener('click', function() {
                    overlayUpdateBot.classList.add('active');
                    selectedBotId = -1;
                    console.log(selectedBotId)

                });

                discardChanges.addEventListener('click', function() {
                    overlayUpdateBot.classList.remove('active');
                    location.reload();
                });
                });

        </script>

{% endblock %}

{% block addbot_active %}
    active
{% endblock %}

{% block open_trades %}
{{ open_trades_count }} 
{% endblock %}



from django.shortcuts import render
from django.http import JsonResponse, HttpResponse
import csv, os, json
from django.http import JsonResponse
from datetime import datetime
from .models import Trades, Profile, Bot, Symbol
from django.views.decorators.csrf import csrf_exempt
from django.shortcuts import redirect
# from edwizy_app.oanda import *
# from edwizy_app.alpaca import *
from edwizy_app.new_alpaca import *
from edwizy_app.streaming import *
from edwizy_app.dhan import *
import decimal
import os

ALPACA_API_KEY_ID = "PKZORLL65QU26JUJ7N0B"
ALPACA_API_SECRET_KEY = "QupmtRUUIh4hI0sd13tHQTgTes7t0UUXm0TFGXmU"
BASE_URL = "https://paper-api.alpaca.markets"

@csrf_exempt
def load_data(request):
    candles = get_historical_data("ETH/USD")
    try:
        if request.method == 'POST':
            symbol = request.POST.get('symbol')
            time_frame = request.POST.get('timeFrame')
            # Return the data as a response
            
            print(time_frame)
            data = process_data(candles, time_frame)
            return HttpResponse(data, content_type='text/csv')
        
    except:
        data = []
        data = process_data(candles, "1M")
        return HttpResponse(data, content_type='text/csv')



def base(request):
    profile = Profile.objects.get(user=request.user)
    open_conditions = {}
    open_cond = ['OPEN', 'PENDING']
    open_conditions['owner'] = profile
    open_conditions['status__in'] = open_cond
    open_trades = Trades.objects.filter(**open_conditions).order_by('-pk')
    open_trades_count = open_trades.count()
    
    context = {
        "open_trades_count": open_trades_count
    }
    return render(request, 'base.html', context)


def dashboard(request):
    profile = Profile.objects.get(user=request.user)
    calcAccount(request)
    bots = Bot.objects.filter(owner= profile)
    profile = Profile.objects.get(user=request.user)
    open_conditions = {}
    open_cond = ['OPEN', 'PENDING']
    open_conditions['owner'] = profile
    open_conditions['status__in'] = open_cond
    open_trades = Trades.objects.filter(**open_conditions).order_by('-pk')
    open_trades_count = open_trades.count()
    symbol = Symbol.objects.first()
    # history = get_history(symbol.name, symbol.exchange_segment, symbol.instrument_type)
    # print(history)

    context = {
        'active_bots': bots,
        "open_trades_count": open_trades_count
    }
    return render(request, 'dashboard.html', context)

def data_view(request):
    current_dir = os.path.dirname(os.path.abspath(__file__))
    csv_path = os.path.join(current_dir, 'data.csv')

    data = []
    with open(csv_path, 'r') as file:
        reader = csv.reader(file)
        next(reader)  # Skip the header row
        for row in reader:
            timestamp_str = row[0]
            timestamp = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S.%f')
            timestamp_ms = int(timestamp.timestamp() * 1000)  # Convert the timestamp to milliseconds
            data.append([timestamp_ms] + [float(value) for value in row[1:]])

    return JsonResponse(data, safe=False)

def trades(request):
    profile = Profile.objects.get(user=request.user)
    open_conditions = {}
    open_cond = ['OPEN', 'PENDING']
    open_conditions['owner'] = profile
    open_conditions['status__in'] = open_cond
    open_trades = Trades.objects.filter(**open_conditions).order_by('-pk')
    open_trades_count = open_trades.count()
    closed_conditions = {}
    closed_cond = ['CLOSED']
    closed_conditions['owner'] = profile
    closed_conditions['status__in'] = closed_cond
    closed_trades = Trades.objects.filter(**closed_conditions).order_by('-pk')
    closed_trades_count = closed_trades.count()

    context = {
        'open_trades': open_trades,
        'closed_trades': closed_trades,
        'closed_trades_count': closed_trades_count,
        'open_trades_count': open_trades_count
    }
    return render(request, 'trades.html', context)

def addbot(request):
    profile = Profile.objects.get(user=request.user)
    active_bots = Bot.objects.filter(owner= profile)
    charts = ["XAUUSD", "GBPUSD", "EURUSD", "BTCUSD", "ETHUSD"]
    bots = ["Camarilla", "Dare To Trade", "Price Action", "Fibonacci"]
    timeframe = ["1M", "5M", "15M", "1H", "4H", "1D", "1W"]
    order_size = ['0.01', '0.02', '0.03', '0.04', '0.05', '0.1']
    order_type = ['Market Order', 'Stop Order']
    risk_reward = ['1:1', '1:2', '1:3', '1:4', '1:5']
    profile = Profile.objects.get(user=request.user)
    open_conditions = {}
    open_cond = ['OPEN', 'PENDING']
    open_conditions['owner'] = profile
    open_conditions['status__in'] = open_cond
    open_trades = Trades.objects.filter(**open_conditions).order_by('-pk')
    open_trades_count = open_trades.count()
   
    context = {
        'active_bots': active_bots,
        'charts': charts,
        'bots': bots,
        'timeframe': timeframe,
        'order_size': order_size,
        'order_type': order_type,
        'risk_reward': risk_reward,
        "open_trades_count": open_trades_count

    }
    return render(request, 'addbot.html', context)

def analytics(request):
    calcAccount(request)
    profile = Profile.objects.get(user=request.user)
    profile = Profile.objects.get(user=request.user)
    open_conditions = {}
    open_cond = ['OPEN', 'PENDING']
    open_conditions['owner'] = profile
    open_conditions['status__in'] = open_cond
    open_trades = Trades.objects.filter(**open_conditions).order_by('-pk')
    open_trades_count = open_trades.count()
    context = {
        'profile': profile,
        "open_trades_count": open_trades_count
    }
    return render(request, 'analytics.html', context)

def settings(request):
    profile = Profile.objects.get(user=request.user)
    api_key = profile.api_key[:5]
    secret_key = profile.secret_key[:5]
    calcprofit(request)
    profile = Profile.objects.get(user=request.user)
    open_conditions = {}
    open_cond = ['OPEN', 'PENDING']
    open_conditions['owner'] = profile
    open_conditions['status__in'] = open_cond
    open_trades = Trades.objects.filter(**open_conditions).order_by('-pk')
    open_trades_count = open_trades.count()

    context = {
        'profile': profile,
        'api_key': api_key,
        'secret_key': secret_key,
        "open_trades_count": open_trades_count
    }
    return render(request, 'settings.html', context)

@csrf_exempt
def update_bot(request):
    if request.method == 'POST':
        profile = Profile.objects.get(user=request.user)
        data = json.loads(request.body)
        bot_id = data.get('botId')
        print(bot_id)
        chart = data.get('chart')
        bot = data.get('bot')
        timeframe = data.get('timeframe')
        order_type = data.get('orderType')
        order_size = data.get('orderSize')
        risk_reward = data.get('riskReward')
        get_bot = Bot.objects.get(name=bot)

        try:
            active_bot = Bot.objects.get(id=bot_id)
            active_bot.bot = get_bot
            active_bot.time_frame = timeframe
            active_bot.symbol = chart
            active_bot.order_type = order_type
            active_bot.order_size = order_size
            active_bot.risk_reward = risk_reward
            active_bot.save()
            print('exists')
        except Bot.DoesNotExist:
            active_bot = Bot.objects.create(owner =profile, bot=get_bot, time_frame=timeframe, symbol=chart, order_type=order_type, order_size=order_size, risk_reward=risk_reward)
            print('not exists')

        return JsonResponse({'success': True})
    return JsonResponse({'success': False, 'error': 'Invalid request method'})

@csrf_exempt
def delete_bot(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        bot_id = data.get('botId')
        print(bot_id)
        
        active_bot = Bot.objects.get(id=bot_id)
        active_bot.delete()

        return JsonResponse({'success': True})
    return JsonResponse({'success': False, 'error': 'Invalid request method'})


def calcAccount(request):
    profile = Profile.objects.get(user=request.user)
    closed_conditions = {'owner': profile, 'status__in': ['CLOSED']}
    closed_trades = Trades.objects.filter(**closed_conditions).order_by('-id')

    if closed_trades.exists():
        last_closed_trade_id = closed_trades.first().id
        new_closed_trades = closed_trades.filter(id__gt=profile.last_closed_trade_id)
        profile.last_closed_trade_id = last_closed_trade_id
        profile.no_of_total_trades += new_closed_trades.count()

        for trade in new_closed_trades:
            profile.net_profit += trade.profit
            if trade.profit > 0:
                profile.no_of_profit_trades += 1
            else:
                profile.no_of_loss_trades += 1

            if "Buy" in trade.order_type:
                profile.no_of_long_positions += 1
                if trade.profit > 0:
                    profile.long_positions_won += 1

            if "Sell" in trade.order_type:
                profile.no_of_short_positions += 1
                if trade.profit > 0:
                    profile.short_positions_won += 1

        profile.account_balance = (profile.initial_deposit + profile.net_profit) - profile.withdrawal
        profile.total_win_rate = (profile.no_of_profit_trades / profile.no_of_total_trades) * 100 if profile.no_of_total_trades else 0.0
        profile.short_positions_won_perc = (profile.short_positions_won / profile.no_of_short_positions) * 100 if profile.no_of_short_positions else 0.0
        profile.long_positions_won_perc = (profile.long_positions_won / profile.no_of_long_positions) * 100 if profile.no_of_long_positions else 0.0
        profile.save()

    return JsonResponse({'success': True})

def calcprofit(request):
    profile = Profile.objects.get(user=request.user)
    closed_conditions = {'owner': profile, 'status__in': ['CLOSED']}
    closed_trades = Trades.objects.filter(**closed_conditions)

    result = [['0', profile.initial_deposit]]
    previous_value = profile.initial_deposit
    for trade in closed_trades:
        month = trade.id
        profit = trade.profit + previous_value
        result.append([month, profit])
        previous_value = profit

    return JsonResponse(result, safe=False)





    if sym.name in open_trades['correlationId'].tolist():
                        filtered_trades = open_trades[open_trades['correlationId'] == sym.name]
                        order_status = filtered_trades['orderStatus']
                        print(order_status)